from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from data import config
from filters import IsNotBanned
from loader import bot, dp
from keyboards.default import main_kbd
from keyboards.inline import contact_user_kbd, recall_kbd, cancel_chat_kbd
from database import User, requests
from states import UserChatState


@dp.message_handler(IsNotBanned(), text='üìû –°–≤—è–∑–∞—Ç—å—Å—è')
async def cmd_contact(message: types.Message, state: FSMContext):
    text = f'üëá <i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:</i>'
    last_message = await message.answer(
        text=text,
        reply_markup=contact_user_kbd
    )
    async with state.proxy() as data:
        data['chat_id'] = message.chat.id
        data['last_message_id'] = last_message.message_id


@dp.callback_query_handler(text_contains='contact_')
async def contact_way(call: types.CallbackQuery, session: AsyncSession):
    call_data = call.data.split('_')[-1]

    if call_data == 'recall':
        db_user: User = await requests.get_user(user_id=call.from_user.id, session=session)
        phone_number = db_user.phone_number
        text = f'<b>–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> <code>{phone_number}</code>? ' \
               f'<i>–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, <b>–µ—Å–ª–∏ –Ω–µ—Ç,</b></i>' \
               f'–≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å'
        kbd = recall_kbd
        # state
    elif call_data == 'chat':
        text = f'‚úÖüìû‚úÖ–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì", –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º. ' \
               f'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ'
        kbd = cancel_chat_kbd
        await UserChatState.dialog_start.set()

    await bot.edit_message_text(
        text=text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kbd
    )
    await bot.answer_callback_query(callback_query_id=call.id)


@dp.callback_query_handler(text='recall_confirm')
async def contact_recall(call: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    if await state.get_state():
        await state.finish()
    user: User = await requests.get_user(user_id=call.from_user.id, session=session)
    text_to_admin = f'–ó–∞–ø—Ä–æ—Å <u>–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å</u> –æ—Ç <b>{user.fio}</b> <code>{user.phone_number}</code>'
    text = '‚úÖ<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await call.message.answer(text=text, reply_markup=main_kbd)
    await bot.send_message(chat_id=config.ADMIN, text=text_to_admin)
    # await bot.send_message(chat_id=config.RECALL_CHAT, text=text_to_admin)
    await bot.answer_callback_query(callback_query_id=call.id)
