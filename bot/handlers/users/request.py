from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.storage import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from filters import IsNotBanned
from loader import bot, dp
from keyboards.default import main_kbd
from keyboards.inline import request_kbd, back_to_main_kbd
from database import requests
from states import UserSuggestionState, UserLeaveRequestState
from utils import fio_format_editor, phone_format_editor


@dp.message_handler(IsNotBanned(), text='üìõ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
async def cmd_leave_request(message: types.Message, state: FSMContext):
    text = 'üìõüëáüìõ <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:</i>'
    last_message = await message.answer(
        text=text,
        reply_markup=request_kbd
    )
    async with state.proxy() as data:
        data['chat_id'] = message.chat.id
        data['last_message_id'] = last_message.message_id


@dp.callback_query_handler(text_contains='request_')
async def request_info(call: types.CallbackQuery, state: FSMContext):
    call_data = call.data.split('_')[-1]
    data = await state.get_state()
    print(data)
    if call_data == 'leave':
        text = '<i><b>–®–∞–≥ 1/3</b></i>. üìì –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, ' \
               '–ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:'
        await UserLeaveRequestState.address.set()
        kbd = back_to_main_kbd

    elif call_data == 'suggestion':
        text = 'üí° <i><b>–†–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å)</b></i>'
        await UserSuggestionState.suggestion.set()
        kbd = back_to_main_kbd

    await bot.edit_message_text(
        text=text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kbd
    )

    # async with state.proxy() as data:
    #     data['chat_id'] = call.message.chat.id
    #     data['last_message_id'] = call.message.message_id
    # await bot.answer_callback_query(callback_query_id=call.id)
